#!/usr/bin/env node

var opts = require("nomnom")
    .help("Usage: catty [flags] input [output]")
    .option('follow', {
      abbr: "f",
      flag: true
    })
    .option('dir', {
      abbr: "d"
    })
    .option('global', {
      flag: true,
      abbr: 'g'
    })
    .option('deps', {
    })
    .parse();

var catty = require("../")(opts);
var input = opts._[0];
var output = opts._[1];
var keyCommands = [];

if (opts.follow) {
  initKeyCommands();
}

if (opts.dir) {
  opts.dir.split(',').forEach(function(d) {
    catty.addLibrary(d);
  });
}

catty.cat([input], output);

function initKeyCommands() {
  process.stdin.resume();
  process.stdin.setEncoding('utf8');
  process.stdin.setRawMode(true);
  process.stdin.on('data', function(char) {
    if (char == '\3') {
      process.exit();
    } else if (char in keyCommands) {
      runKeyCommand(char);
    } else {
      process.stdout.write(char);
    }
  });

  addKeyCommand('q', 'quit', function() {
    process.exit();
  });
  addKeyCommand('h', 'list commands', function() {
    listKeyCommands();
  });
}

function addKeyCommand(flag, description, callback) {
  keyCommands[flag] = {callback: callback, description: description};
}

function listKeyCommands() {
  var msg = "Key commands:";
  keyCommands.forEach(function(cmd, k) {
    var cmd = keyCommands[k];
    msg += "\n  " + k + ": " + cmd.description;
  });
  console.log(msg);
}

function runKeyCommand(c) {
  var obj = keyCommands[c];
  if (obj) {
    obj.callback();
  }
}
